/*

const FXAA_SPAN_MAX: f32 = 8.0;
const FXAA_REDUCE_MUL: f32 = 1.0 / 8.0;
const FXAA_REDUCE_MIN: f32 = 1.0 / 128.0;

        for y_inv in 4..(HEIGHT - 4) {
            for x in 4..(WIDTH - 4) {
                // calculate proper y value and pixel uvs
                let y = HEIGHT - y_inv;
                let u = ((2 * x) as f32 / WIDTH as f32) - 1.0;
                let v = ((2 * y) as f32 / HEIGHT as f32) - 1.0;
                let i = y_inv * WIDTH + x;

                let iNW = (y_inv - 1) * WIDTH + (x - 1);
                let iNE = (y_inv - 1) * WIDTH + (x + 1);
                let iSW = (y_inv + 1) * WIDTH + (x - 1);
                let iSE = (y_inv + 1) * WIDTH + (x + 1);

                let rgbNW = Vec3 {
                    x: buffer[iNW * 4 + 0] as f32 / 255.0,
                    y: buffer[iNW * 4 + 1] as f32 / 255.0,
                    z: buffer[iNW * 4 + 2] as f32 / 255.0,
                };
                let rgbNE = Vec3 {
                    x: buffer[iNE * 4 + 0] as f32 / 255.0,
                    y: buffer[iNE * 4 + 1] as f32 / 255.0,
                    z: buffer[iNE * 4 + 2] as f32 / 255.0,
                };
                let rgbSW = Vec3 {
                    x: buffer[iSW * 4 + 0] as f32 / 255.0,
                    y: buffer[iSW * 4 + 1] as f32 / 255.0,
                    z: buffer[iSW * 4 + 2] as f32 / 255.0,
                };
                let rgbSE = Vec3 {
                    x: buffer[iSE * 4 + 0] as f32 / 255.0,
                    y: buffer[iSE * 4 + 1] as f32 / 255.0,
                    z: buffer[iSE * 4 + 2] as f32 / 255.0,
                };
                let rgbM = Vec3 {
                    x: buffer[i * 4 + 0] as f32 / 255.0,
                    y: buffer[i * 4 + 1] as f32 / 255.0,
                    z: buffer[i * 4 + 2] as f32 / 255.0,
                };

                let luma = Vec3 {
                    x: 0.299,
                    y: 0.587,
                    z: 0.114,
                };
                let lumaNW = luma.dot(rgbNW);
                let lumaNE = luma.dot(rgbNE);
                let lumaSW = luma.dot(rgbSW);
                let lumaSE = luma.dot(rgbSE);
                let lumaM = luma.dot(rgbM);

                let lumaMin = f32::min(
                    lumaM,
                    f32::min(f32::min(lumaNW, lumaNE), f32::min(lumaSW, lumaSE)),
                );
                let lumaMax = f32::max(
                    lumaM,
                    f32::max(f32::max(lumaNW, lumaNE), f32::max(lumaSW, lumaSE)),
                );

                let mut dir: [f32; 2] = [0.0, 0.0];
                dir[0] = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
                dir[1] = (lumaNW + lumaSW) - (lumaNE + lumaSE);

                let dirReduce = f32::max(
                    (lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),
                    FXAA_REDUCE_MIN,
                );

                let rcpDirMin = 1.0 / (f32::min(dir[0].abs(), dir[1].abs()) + dirReduce);

                dir[0] = FXAA_SPAN_MAX.min((-FXAA_SPAN_MAX).max(dir[0] * rcpDirMin));
                dir[1] = FXAA_SPAN_MAX.min((-FXAA_SPAN_MAX).max(dir[1] * rcpDirMin));

                let A0x = dir[0] * (1.0 / 3.0 - 0.5);
                let A0y = dir[1] * (1.0 / 3.0 - 0.5);
                let A1x = dir[0] * (2.0 / 2.0 - 0.5);
                let A1y = dir[1] * (2.0 / 2.0 - 0.5);

                let B0x = dir[0] * (0.0 / 3.0 - 0.5);
                let B0y = dir[1] * (0.0 / 3.0 - 0.5);
                let B1x = dir[0] * (3.0 / 3.0 - 0.5);
                let B1y = dir[1] * (3.0 / 3.0 - 0.5);

                let iA0: usize =
                    (y_inv + (A0y.round() as usize)) * WIDTH + (x + (A0x.round() as usize));
                let iA1: usize =
                    (y_inv + (A1y.round() as usize)) * WIDTH + (x + (A1x.round() as usize));
                let iB0: usize =
                    (y_inv + (B0y.round() as usize)) * WIDTH + (x + (B0x.round() as usize));
                let iB1: usize =
                    (y_inv + (B1y.round() as usize)) * WIDTH + (x + (B1x.round() as usize));

                let rgbA = (1.0 / 2.0)
                    * (Vec3 {
                        x: buffer[iA0 * 4 + 0] as f32 / 255.0,
                        y: buffer[iA0 * 4 + 1] as f32 / 255.0,
                        z: buffer[iA0 * 4 + 2] as f32 / 255.0,
                    } + Vec3 {
                        x: buffer[iA1 * 4 + 0] as f32 / 255.0,
                        y: buffer[iA1 * 4 + 1] as f32 / 255.0,
                        z: buffer[iA1 * 4 + 2] as f32 / 255.0,
                    });

                let rgbB = rgbA * (1.0 / 2.0)
                    + (1.0 / 4.0)
                        * (Vec3 {
                            x: buffer[iB0 * 4 + 0] as f32 / 255.0,
                            y: buffer[iB0 * 4 + 1] as f32 / 255.0,
                            z: buffer[iB0 * 4 + 2] as f32 / 255.0,
                        } + Vec3 {
                            x: buffer[iB1 * 4 + 0] as f32 / 255.0,
                            y: buffer[iB1 * 4 + 1] as f32 / 255.0,
                            z: buffer[iB1 * 4 + 2] as f32 / 255.0,
                        });

                let lumaB = luma.dot(rgbB);
                let colorvec: Vec3;

                if (lumaB < lumaMin) || (lumaB > lumaMax) {
                    colorvec = rgbA;
                } else {
                    colorvec = rgbB;
                }

                buffer[i * 4 + 0] = (255.0 * colorvec.x) as u8;
                buffer[i * 4 + 1] = (255.0 * colorvec.y) as u8;
                buffer[i * 4 + 2] = (255.0 * colorvec.z) as u8;
            }
             */